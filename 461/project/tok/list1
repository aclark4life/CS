/* separators */

(	OPEN_PAREN_TOKEN
)	CLOSE_PAREN_TOKEN
{	OPEN_BRACE_TOKEN
}	CLOSE_BRACE_TOKEN
[	OPEN_BRACKET_TOKEN
]	CLOSE_BRACKET_TOKEN
;	SEMICOLON_TOKEN
,	COMMA_TOKEN
.	PERIOD_TOKEN

/* operators */

=	ASSIGNS_TOKEN	
>	GREATER_TOKEN
<	LESS_TOKEN
!	NOT_TOKEN
~	TILDE_TOKEN
?	CONDITIONAL_TOKEN
:	COLON_TOKEN
==	EQ_TOKEN
<=	LE_TOKEN
>=	GE_TOKEN
!=	NE_OP_TOKEN
||	LOGICAL_OR_TOKEN
&&	LOGICAL_AND_TOKEN
++	INC_TOKEN
--	DEC_TOKEN
+	PLUS_TOKEN
-	MINUS_TOKEN
/	DIV_TOKEN
&	AND_TOKEN
|	OR_TOKEN
^	XOR_TOKEN	
%	MOD_TOKEN
<<	SHL_TOKEN	
>> 	SAR_TOKEN	
>>>	SHR_TOKEN
+=	ADD_ASSIGN_TOKEN
-=	SUB_ASSIGN_TOKEN
*=	MUL_ASSIGN_TOKEN
/=	DIV_ASSIGN_TOKEN
&=	AND_ASSIGN_TOKEN
|=	OR_ASSIGN_TOKEN
^= 	XOR_ASSIGN_TOKEN
%=	MOD_ASSIGN_TOKEN
<<=	SHL_ASSIGN_TOKEN		
>>=	SAR_ASSIGN_TOKEN
>>>=   	SHR_ASSIGN_TOKEN
*	MUL_TOKEN

/* reserved words */    

abstract	ABSTRACT_TOKEN
boolean		BOOLEAN_TOKEN
break		BREAK_TOKEN	
byte 		BYTE_TOKEN
case		CASE_TOKEN
cast		CAST_TOKEN
catch		CATCH_TOKEN
char		CHAR_TOKEN
class		CLASS_TOKEN
const		CONST_TOKEN
continue	CONTINUE_TOKEN
default		DEFAULT_TOKEN
do		DO_TOKEN
double		DOUBLE_TOKEN
else		ELSE_TOKEN
extends		EXTENDS_TOKEN
final		FINAL_TOKEN
finally		FINALLY_TOKEN
float		FLOAT_TOKEN
for		FOR_TOKEN
future		FUTURE_TOKEN
generic		GENERIC_TOKEN
goto		GOTO_TOKEN
if		IF_TOKEN
implements	IMPLEMENTS_TOKEN
import		IMPORT_TOKEN
inner		INNER_TOKEN
instanceof	INSTANCEOF_TOKEN
int		INT_TOKEN
interface	INTERFACE_TOKEN
long		LONG_TOKEN
native		NATIVE_TOKEN
new		NEW_TOKEN
null		NULL_TOKEN
operator	OPERATOR_TOKEN
outer		OUTER_TOKEN
package		PACKAGE_TOKEN
private 	PRIVATE_TOKEN
protected	PROTECTED_TOKEN
public		PUBLIC_TOKEN
rest		REST_TOKEN
return		RETURN_TOKEN
short		SHORT_TOKEN
static		STATIC_TOKEN
super		SUPER_TOKEN
switch		SWITCH_TOKEN
synchronized	SYNCHRONIZED_TOKEN
this		THIS_TOKEN
throw		THROW_TOKEN
throws		THROWS_TOKEN
transient	TRANSIENT_TOKEN
try		TRY_TOKEN
var		VAR_TOKEN
void		VOID_TOKEN
volatile	VOLATILE_TOKEN
while		WHILE_TOKEN

