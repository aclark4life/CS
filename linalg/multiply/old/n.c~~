/* m.c - Multiply Two nxn Matrices 
 * Alex Clark - August 1998  
 */

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

int n;
int **A,**B,**C;
void get_n();
void get_matrices();
void print_em_out();
void multiply_em();

void main(int argc, char *argv[])
{
        if (argc!=1)
        {
                printf("Sorry, I don't take command line arguments.\n");
                exit(-1);
	}
        else
	{
		get_n();
		get_matrices();
		multiply_em();
		print_em_out();
	}
}
void multiply_em()
{
	int i,j,k,s; 

	s = 0; 
	for (k=1;k<=n;k++)		
	{
		for (i=1;i<=n;i++)		
       		{ 
			for (j=1;j<=n;j++)		
			{
				//printf("%d X",A[k][j]);	
				//printf(" %d = ",B[j][i]);	
				//printf ( "%d\n",(A[k][j])*(B[j][i]));	

				s=s+((A[k][j])*(B[j][i]));
				if (j==n)
				{
					C[k][i]=s;
				}
			}
			//printf ( "s=%d\n",s);
			//printf ( "\n");	

			s=0;
		}

	}
}
void get_n()
{
	char *string=(char *)malloc(1024*sizeof(char)); //scanf("%d",&n);                                 
	fgets(string,1024,stdin);	
	//printf ("%s\n",string);
	n=atoi(string);
	//printf("%d\n",n);
}
void get_matrices()
{
	int i,j;
	char *string=(char *)malloc(1024*sizeof(char));
	char *tokenPtr;
	int counter=1;

	A=(int **)malloc(n*sizeof(int *));
	B=(int **)malloc(n*sizeof(int *));
	C=(int **)malloc(n*sizeof(int *));

	for (i=1;i<=n;i++)		
        {
                A[i]=(int *)malloc(n*sizeof(int));
                B[i]=(int *)malloc(n*sizeof(int));
                C[i]=(int *)malloc(n*sizeof(int));
        }

	for (i=1;i<=n;i++)				//GET A
	{ 
		fgets(string,1024,stdin); 
        	{
			tokenPtr=strtok(string," "); 
			while (tokenPtr!=NULL)
			{
				A[i][counter]=atoi(tokenPtr);
				//printf("%d",A[i][counter]); 
				//printf ("[%d][%d] ",i,counter);	
				tokenPtr=strtok(NULL," ");
				counter++;
			}
			//printf("\n");
			counter=1;
		}
	}
//	printf("\n");
	counter=1;
	for (i=1;i<=n;i++)				// GET B
	{ 
		fgets(string,1024,stdin); 
        	{
			tokenPtr=strtok(string," "); 
			while (tokenPtr!=NULL)
			{
				B[i][counter]=atoi(tokenPtr);
				//printf("%d",B[i][counter]); 
				//printf ("[%d][%d] ",i,counter);	
				tokenPtr=strtok(NULL," ");
				counter++;
			}
//			printf("\n");
			counter=1;
        	}
	}
//	printf("\n");
	counter=1;
}
void print_em_out()
{
	int i,j;
	printf ( "\n%d\n\n",n);	
	for (i=1;i<=n;i++)		
        {
		for (j=1;j<=n;j++)		
		{
			printf ("%d ",A[i][j]);	
		}
		printf ( "\n");	
        }
	printf ( "\n");	
	for (i=1;i<=n;i++)		
        {
		for (j=1;j<=n;j++)		
		{
			printf ("%d ",B[i][j]);	
		}
		printf ( "\n");	
        }
	printf ( "\n");	
	for (i=1;i<=n;i++)		
        {
		for (j=1;j<=n;j++)		
		{
			printf ("%d ",C[i][j]);	
		}
		printf ( "\n");	
        }
}
