
Review follows a.j. smith 4/90 ieee/computer 
1.  Recommendation:

2. Summary:

3. Validaity and significance.

4. Quality of work. (methods, techniques, accuracy and presentation)

  A. What is the purpose?

       1. What is the the problem? clearly stated?

       2. Early description of accomplishments?

  B. Is the paper appropriate?

  C. Is the goal significant? 

    1. Is the problem new?

    2. has the design been built before?

    3. Has the problem been solved before?

    4. Is this a trivial variation on or an extension of a previous result?

    5. Is the author aware of of related work?

    6. Does the author cite these previous works? and make distinctions from it?

    7. If an implementation, are there new ideas?

  E. Is the method of approach valid?

       1. Is the approach sufficient for the purpose?

       2. Sufficient discussion of new ideas?

  F. Is the actual execution of the research correct?

     1. Algorithms correct? convincing?

     2. Did the author do what was claimed?

  G. Are the correct conclusions drawn from the results?

     1. what are the applications/implications of the results?

     2. Adequate discussion of these results?

  H. Is the presentation satisfactory?

     1. Readability?

     2. Does abstract describe the paper?

     3. Does the introduction describe the problem and the framework?

     4. Appropriate amount of detail?

     5. Figures/tables appropriate?

     6. Self-contained?

     7. &c. long/short/typos ??

  I. What did I learn?





  
read the following cfp (call for papers) and consider this:

write and submit an article as a class.

you certainly would have a unique perspective...

From: Nancy Mead <nrm@SEI.CMU.EDU>
Subject: IEEE Software Special Issue on SE Education

Call for Articles
IEEE Software
Special Issue on
Professional Education for Software Engineers

Properly educated software engineers are crucial to the long-term success of
any software development organization. This need may be partially addressed
by focused software engineering programs at either the undergraduate or
graduate level. In addition, the rapid pace of technological change implies
continual upgrading of software engineering skills via ongoing training
programs. The goal of this issue is to foster discussions among managers,
practitioners, educators, and trainers as to the most effective and
appropriate means to prepare professional software engineers.

We seek original articles addressing the full range of education and training
issues in the field of software engineering. Specific topics that might be
addressed include (but are not limited to):

- -What are the best practices used in industry and government to train
software engineers?
- -How should industry and government training programs evolve if universities
begin graduating significant numbers of software engineers?
- -How can universities and industries collaborate in the education of
software engineers?
- -How can emerging technologies and approaches, such as the Internet and
distance education, be used to enhance software engineering education and
training?
- -What fundamental skills and knowledge characterize the professional
software engineer? What education and training are needed to perform the
job of the professional software engineer?
- -What are the relationships between software engineering and disciplines
such as computer science, electrical engineering, and information systems?
- -Should software engineering education be primarily at the graduate level,
or at the undergraduate level as is customary in other engineering disciplines?
- -What models exist for undergraduate software engineering education?

Please submit one electronic copy of the complete article in MSWord, ASCII, or
Latek as well as eight (8) printed copies by February 1, 1997 to guest
coeditor

Nancy R. Mead
Software Engineering Institute
5000 Forbes Avenue
Pittsburgh, PA 15213
nrm@sei.cmu.edu

