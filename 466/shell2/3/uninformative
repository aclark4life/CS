From binkley@csmaster.loyola.edu Tue Feb 25 10:22:29 1997
Return-Path: <binkley@csmaster.loyola.edu>
Received: from lbf by csmaster.loyola.edu (SMI-8.6/SMI-SVR4)
	id KAA01284; Tue, 25 Feb 1997 10:22:28 -0500
Received: by lbf (SMI-8.6/SMI-SVR4)
	id KAA09752; Tue, 25 Feb 1997 10:22:57 -0500
From: binkley@csmaster.loyola.edu (Dave Binkley)
Message-Id: <199702251522.KAA09752@lbf>
Subject: Re: your mail
To: aclark@csmaster.loyola.edu (J. Alexander Clark)
Date: Tue, 25 Feb 1997 10:22:57 -0500 (EST)
In-Reply-To: <199702241950.OAA16049@sanity.loyola.edu> from "J. Alexander Clark" at Feb 24, 97 02:50:02 pm
X-Mailer: ELM [version 2.4 PL25]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-Length: 2053
Status: OR

> 
> /* dave - tokenc is the real token count- yipee!
> 	i understand that knowing what the token count
> 	is important with regard to any recursive call to 
> 	do_pipe. i am currently reflecting on this situation. but
> 	what is really bothering me is the 'ls | more' problem that
> 	i am having. i closed the fd[1] like you said. that

fd[1] is the write end of the pipe
fd[0] is the read end.
make sure you put the right one in stdin's slot (0)
stdout's slot is slot 1.


> 	is a copy of the file descriptor that is now located at 0.
> 	since file descriptor 0 is left open for the pipe, then it
> 	never gets closed right? ie 'more' gets it's input from
> 	file desc. 0 and it never ends since file desc. 0 never 
> 	gets closed. is this not what is happening?

when the ls process dies, it closes all its open file descriptors.

- dave
> 	aclark */
> 
> #include<stdio.h>
> #include<unistd.h>
>     
> do_pipe(char **tokenv,int *tokenc)
> {
>    	int fd[2];
>    	int pid;
> 	int *stat_loc;
> 
>  	free(tokenv[(*tokenc)-1]);
>        	tokenv[(*tokenc)-1]=NULL;
>        	if(tokenv[(*tokenc)]==NULL)
>         {
>         	execvp(tokenv[0],tokenv);
>         }
>         else
>         {
>         	if (pipe(fd)==-1)
>         	{
>         		perror(tokenv[0]);
>                 	exit(0);
>         	}
>         	pid=fork();
>                	switch(pid)
>                 {
>                 	case 0:        	/*tokenv=tokenv+(*tokenc); */
>                                         close(0); 
> 					dup(fd[1]);
> 					close(fd[1]); 
>                                         execvp(tokenv[(*tokenc)],tokenv);
>                                         perror(tokenv[(*tokenc)]);
>                                         break;
>                 	default:       	close(1);
>                                         dup(fd[0]);
>                                         execvp(tokenv[0],tokenv);
>                                         perror(tokenv[0]);
>                                         break;
>                 }
>  
>       	} 
> }
> 


